%{

#include "tc.tab.hpp"

#include <cstdio>

#include <iostream>
#include <string>

#include "TreeBuilder.hpp"

extern "C" int yylex();
extern "C" FILE *yyin;

void yyerror(const char *s);

static TreeBuilder tb;

%}

%code requires
{
#include "TreeBuilder.hpp"
}

%code provides
{
    #include <ostream>

    static std::ostream &
    operator<<(std::ostream &os, Text text)
    {
        os << '(' << text.from << ";+" << text.len << ')';
        return os;
    }
}

%union {
    Text text;
    PNode *node;
}

%token <text> ID NUM RETURN ';' '(' ')' '{' '}'

%type <node> tu funcs func stmts head body type name id args ret

%%

tu
    : funcs { tb.setRoot(tb.addNode($1)); }
    ;

funcs
    : func       { $$ = tb.addNode($1); }
    | funcs func { $$ = tb.append($1, tb.addNode($2)); }
    ;

func
    : head body { $$ = tb.append($1, tb.addNode($2)); }
    ;

body
    : '{' stmts '}' { $$ = tb.addNode({ tb.addNode($1), tb.addNode($2), tb.addNode($3) }); }
    ;

stmts
    : /* empty */ { $$ = tb.addNode(); }
    | stmts ret   { $$ = tb.append($1, tb.addNode($2)); }
    ;

head
    : type name args { $$ = tb.addNode({ tb.addNode($1), tb.addNode($2), tb.addNode($3) }); }
    ;

type
    : id { $$ = tb.addNode($1); }
    ;

name
    : id { $$ = tb.addNode($1); }
    ;

id
    : ID { $$ = tb.addNode($1); }
    ;

args
    : '(' ')' { $$ = tb.addNode({ tb.addNode($1), tb.addNode($2) }); }
    ;

ret
    : RETURN ';' { $$ = tb.addNode({ tb.addNode($1), tb.addNode($2) }); }
    | RETURN NUM ';' { $$ = tb.addNode({ tb.addNode($1), tb.addNode($2), tb.addNode($3) }); }
    ;

%%

int
main(int argc, char *argv[])
{
    extern std::size_t offset;
    offset = 0U;
    extern int yydebug;
    yydebug = 0;

    if (argc != 2) {
        std::cerr << "Wrong arguments\n";
        return 1;
    }

    // open a file handle to a particular file:
    FILE *myfile = std::fopen(argv[1], "r");
    // make sure it is valid:
    if (!myfile) {
        std::cerr << "I can't open " << argv[1] << "!\n";
        return -1;
    }
    // set flex to read from it instead of defaulting to STDIN:
    yyin = myfile;

    // parse through the input until there is no more:
    do {
        yyparse();
    } while (!std::feof(yyin));
}

void
yyerror(const char s[])
{
    std::cout << "EEK, parse error!  Message: " << s << std::endl;
    // might as well halt now:
    std::exit(-1);
}
